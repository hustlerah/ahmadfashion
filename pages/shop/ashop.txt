import React, { useEffect, useState } from 'react';
import { useSelector, useDispatch } from 'react-redux';
import Link from 'next/link';
import { setProducts, addToCart } from '../../redux/productActions';
import { collection, getDocs } from 'firebase/firestore';
import { db } from '../../backend/firebase';
import { useRouter } from 'next/router';

const Shop = () => {
  const dispatch = useDispatch();
  const products = useSelector((state) => state.products);
  const router = useRouter();
  const [loading, setLoading] = useState(true);

  const fetchProducts = async () => {
    try {
      const querySnapshot = await getDocs(collection(db, 'products'));

      const productData = [];
      querySnapshot.forEach((doc) => {
        productData.push({ id: doc.id, ...doc.data() });
      });

      // Update to show only the first 8 products
      const firstEightProducts = productData.slice(0, 8);

      dispatch(setProducts(firstEightProducts));
      setLoading(false);
    } catch (error) {
      console.error('Error fetching products', error);
      setLoading(false);
    }
  };

  useEffect(() => {
    fetchProducts();
  }, []);

  const handleAddToCart = (productId) => {
    dispatch(addToCart(productId));
    const selectedProduct = products.find((product) => product.id === productId);

    // Log product name and price to the console
    console.log('Product Name:', selectedProduct.productName);
    console.log('Product Price:', selectedProduct.productPrice);
  };

  const RouteToDetails = () => {
    // Implement your logic for navigating to product details
  };

  return (
    <div className="container pt-5 text-center">
      <h1>Shop</h1>

      {loading ? (
        <p>Loading...</p>
      ) : (
        <div className="row row-cols-1 row-cols-md-4 g-4">
          {products.map((product) => (
            <div key={product.id} className="col">
              <div className="card h-100">
                <img
                  onClick={() => {
                    router.push(`/shop/${product.id}`);
                  }}
                  src={product.productImages[0]} // Assuming you have an array of product images
                  className="card-img-top"
                  alt={`Product Image ${product.id}`}
                  style={{ height: '200px', objectFit: 'cover', cursor: 'pointer' }}
                />
                <div className="card-body">
                  <h5 className="card-title">{product.productName}</h5>
                  <p className="card-text">Price: ${product.productPrice}</p>
                  <button onClick={() => handleAddToCart(product.id)} className="btn btn-primary">
                    Add to Cart
                  </button>
                  {/* <Link className='btn btn-danger'>
                  Detaisl
                </Link> */}
                </div>
              </div>
            </div>
          ))}
        </div>
      )}

      <div className="mt-3">
        <Link href={'/shop/cart'}>Cart</Link>
        <button className="btn btn-success">See All Products</button>
      </div>
    </div>
  );
};
 ================================================================================
                                        Cart





// pages/cart.jsx

import React from 'react';
import { useSelector, useDispatch } from 'react-redux';
import { removeFromCart, decreaseQuantity, increaseQuantity} from '@/redux/productActions';

const Cart = () => {
  const dispatch = useDispatch();
  const cartItems = useSelector((state) => state.cart);

  const handleRemoveFromCart = (productId) => {
    dispatch(removeFromCart(productId));
  
  };

  const handleDecreaseQuantity = (productId) => {
    const existingCartItem = cartItems.find((item) => item.id === productId);

    if (existingCartItem) {
      if (existingCartItem.quantity === 1) {
        // If the quantity is 1, remove the item from the cart
        dispatch(removeFromCart(productId));
      } else {
        // If the quantity is greater than 1, decrease the quantity
        dispatch(decreaseQuantity(productId));
      }
    }
  };

  const handleIncreaseQuantity = (productId) => {
    dispatch(increaseQuantity(productId));
  };

  const calculateTotalPrice = () => {
    return cartItems.reduce((total, item) => total + item.productPrice * item.quantity, 0);
  };

  const renderCartItem = (item) => (
    <div key={item.id} className="card mb-3">
      <div className="row g-0">
        <div className="col-md-4">
          <img
            src={item.productImages[0]}
            className="img-fluid rounded-start"
            alt={`Product Image ${item.id}`}
            style={{ height: '150px', objectFit: 'cover' }}
          />
        </div>
        <div className="col-md-8">
          <div className="card-body">
            <h5 className="card-title">{item.productName}</h5>
            <p className="card-text">Price: ${item.productPrice}</p>
            <div className="d-flex align-items-center">
              <p className="card-text me-3">Quantity: {item.quantity}</p>
              <button
                onClick={() => handleRemoveFromCart(item.id)}
                className="btn btn-danger me-2"
              >
                Remove
              </button>
           
              <button
                onClick={() => handleIncreaseQuantity(item.id)}
                className="btn btn-secondary ms-2"
              >
                +
              </button>
            </div>
          </div>
        </div>
      </div>
    </div>
  );

  const renderedCartItems = cartItems.map(renderCartItem);

  return (
    <div className="container mt-5 text-center">
      <h1>Shopping Cart</h1>

      {cartItems.length === 0 ? (
        <p>Your cart is empty.</p>
      ) : (
        <div>
          {renderedCartItems}

          <div className="mt-3">
            <p>Total Price: ${calculateTotalPrice()}</p>
          </div>
        </div>
      )}
    </div>
  );
};

export default Cart;

=================================================================


import { useEffect, useState } from 'react';
import { useRouter } from 'next/router';
import { useSelector } from 'react-redux';



const ProductDetail = () => {
  const router = useRouter();
  const { id } = router.query;

  // Assuming you have a Redux store with the product state
  const products = useSelector((state) => state.products);
  const product = products.find((p) => p.id === id);

  const [selectedImageIndex, setSelectedImageIndex] = useState(0);
  const [loading, setLoading] = useState(true);
  useEffect(() => {
    // Simulate an API call to load products
    // You should replace this with your actual data fetching logic
    const fetchData = async () => {
      try {
        // Simulating a delay of 2 seconds (you can adjust this)
        await new Promise(resolve => setTimeout(resolve, 2000));
        setLoading(false);
      } catch (error) {
        console.error('Error fetching products', error);
        setLoading(false);
      }
    };

    fetchData();
  }, []);
   // Check if the page was loaded directly
   const loadedDirectly = typeof window !== 'undefined' && !router.asPath.includes('/shop/');

   useEffect(() => {
     // Redirect if the page was loaded directly
     if (loadedDirectly) {
       router.push('/');
     }
   }, [loadedDirectly, router]);
 
   if (loading) {
    return <p>Loading...</p>; // You can customize the loader as needed
  }

  if (!product) {
    return (
      <>
        <h1>Product Not Found</h1>
        <p>The product you are looking for does not exist.</p>
        {/* You can customize the 404 page further */}
      </>
    );
  }

  // Settings for the react-slick carousel
  const settings = {
    dots: true,
    infinite: true,
    speed: 500,
    slidesToShow: 1,
    slidesToScroll: 1,
    beforeChange: (current, next) => setSelectedImageIndex(next),
  };

  return (
    <div className="container mt-5">
      <h1>{product.productName}</h1>

      <div className="row">
        <div className="col-md-6">
          {/* <Slider {...settings}>
            {product.productImages.map((image, index) => (
              <div key={index}>
                <img
                  src={image}
                  alt={`Product Image ${index + 1}`}
                  className="img-fluid"
                />
              </div>
            ))}
          </Slider> */}

          <div className={`mt-3 ${styles.imageButtonsContainer}`}>
            {product.productImages.map((image, index) => (
              <button
                key={index}
                className={`${styles.imageButton} ${selectedImageIndex === index ? styles.active : ''}`}
                onClick={() => setSelectedImageIndex(index)}
              >
                <img
                  src={image}
                  alt={`Product Image ${index + 1}`}
                  className={styles.thumbnail}
                />
              </button>
            ))}
          </div>
        </div>

        <div className="col-md-6">
          <div className={styles.fullImagePreview}>
            <img
              src={product.productImages[selectedImageIndex]}
              alt={`Product Image ${selectedImageIndex + 1}`}
              className="img-fluid"
            />
          </div>
          <h4>Price: ${product.productPrice}</h4>
          <p>{product.productDescription}</p>
          {/* Add more product details here */}
          <button className="btn btn-primary">Add to Cart</button>
        </div>
      </div>
    </div>
  );
};

export default ProductDetail;
