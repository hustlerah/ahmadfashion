import React, { useEffect, useState } from 'react';
import { db, auth, storage } from '@/backend/firebase';
import {
  collection,
  doc,
  getDocs,
  where,
  query,
  updateDoc,
} from 'firebase/firestore';
import { getDownloadURL, ref, uploadBytes } from 'firebase/storage';
import { FontAwesomeIcon } from '@fortawesome/react-fontawesome';
import { faCircleUser } from '@fortawesome/free-solid-svg-icons';

function ProfilePage() {
  const [userData, setUserData] = useState([]);
  const [newFullName, setNewFullName] = useState('');
  const [newCountry, setNewCountry] = useState('');
  const [newCity, setNewCity] = useState('');
  const [newPassword, setNewPassword] = useState('');
  const [newProfilePic, setNewProfilePic] = useState(null);
  const [isSaving, setIsSaving] = useState(false);
  const [isUpdatingProfilePic, setIsUpdatingProfilePic] = useState(false);

  useEffect(() => {
    async function fetchData() {
      const data = await fetchDataForCurrentUser();
      if (data) {
        setUserData(data);
      } else {
        console.log('No user is signed in.');
      }
    }

    fetchData();
  }, []);

  async function fetchDataForCurrentUser() {
    const user = auth.currentUser;

    if (user) {
      const userUID = user.uid;
      const q = query(collection(db, 'users'), where('uid', '==', userUID));
      const querySnap = await getDocs(q);

      const data = [];
      querySnap.forEach((doc) => {
        data.push({ id: doc.id, ...doc.data() });
      });

      return data;
    } else {
      return null;
    }
  }

  const handleFullNameChange = (e) => {
    setNewFullName(e.target.value);
  };

  const handleCountryChange = (e) => {
    setNewCountry(e.target.value);
  };

  const handleCityChange = (e) => {
    setNewCity(e.target.value);
  };

  const handlePasswordChange = (e) => {
    setNewPassword(e.target.value);
  };

  const handleUpdateProfile = async () => {
    const user = auth.currentUser;

    if (user) {
      try {
        setIsSaving(true);

        const userRef = doc(db, 'users', userData[0].id);
        const updateData = {
          fullName: newFullName || userData[0].fullName,
          country: newCountry || userData[0].country,
          city: newCity || userData[0].city,
        };

        await updateDoc(userRef, updateData);

        // Change the user's password
        if (newPassword) {
          await user.updatePassword(newPassword);
        }

        console.log('Profile updated successfully');
        alert('Profile updated successfully');
        setNewFullName('');
        setNewCountry('');
        setNewCity('');
        setNewPassword('');
        setIsSaving(false);

        // Reload the page
        window.location.reload();
      } catch (error) {
        console.error('Error updating profile', error);
        setIsSaving(false);
      }
    }
  };

  const handleUpdateProfilePic = async () => {
    const user = auth.currentUser;

    if (user && newProfilePic) {
      try {
        setIsUpdatingProfilePic(true);

        const fileName = `${user.uid}_${newProfilePic.name}`;
        const storageRef = ref(storage, `profile_pics/${fileName}`);
        await uploadBytes(storageRef, newProfilePic);

        const downloadURL = await getDownloadURL(storageRef);

        const userRef = doc(db, 'users', userData[0].id);
        await updateDoc(userRef, { profilePic: downloadURL });

        console.log('Profile picture updated successfully');
        window.location.reload();

        setNewProfilePic(null);
      } catch (error) {
        console.error('Error updating profile picture', error);
      } finally {
        setIsUpdatingProfilePic(false);
      }
    }
  };

  const handleProfilePicChange = (e) => {
    const file = e.target.files[0];
    setNewProfilePic(file);
  };

  const isGoogleSignIn = auth.currentUser?.providerData[0]?.providerId === 'google.com';

  return (
    <div style={{ backgroundColor: '#fff', padding: '90px', maxWidth: '400px', margin: 'auto' }}>
      {userData.map((user) => (
        <div key={user.id}>
          <div style={{ textAlign: 'center' }}>
            {user.profilePic ? (
              <img
                src={user.profilePic}
                alt="Profile"
                style={{ width: '100px', height: '100px', borderRadius: '50%', objectFit: 'cover' }}
              />
            ) : (
              <FontAwesomeIcon icon={faCircleUser} size='xl' />
            )}
            <div style={{ marginTop: '8px' }}>
              <label htmlFor="profilePicInput" style={{ cursor: 'pointer', color: 'blue' }}>
                Update Profile Pic
              </label>
              <input
                type="file"
                id="profilePicInput"
                accept="image/*"
                style={{ display: 'none' }}
                onChange={handleProfilePicChange}
              />
              <button
                onClick={handleUpdateProfilePic}
                style={{ cursor: 'pointer' }}
                disabled={isUpdatingProfilePic}
              >
                {isUpdatingProfilePic ? 'Updating...' : 'Update'}
              </button>
            </div>
          </div>

          <div>
            <label htmlFor="fullName">Full Name:</label>
            <input
              type="text"
              id="fullName"
              value={newFullName || user.fullName}
              onChange={handleFullNameChange}
            />
          </div>

          <div>
            <label htmlFor="email">Email:</label>
            <input type="text" id="email" value={user.email} readOnly />
          </div>

          <div>
            <label htmlFor="country">Country:</label>
            <input
              type="text"
              id="country"
              value={newCountry || user.country}
              onChange={handleCountryChange}
            />
          </div>

          <div>
            <label htmlFor="city">City:</label>
            <input
              type="text"
              id="city"
              value={newCity || user.city}
              onChange={handleCityChange}
            />
          </div>

          {!isGoogleSignIn && (
            <div>
              <label htmlFor="password">Password:</label>
              <input
                type="password"
                id="password"
                value={newPassword}
                onChange={handlePasswordChange}
              />
            </div>
          )}

          <button
            onClick={handleUpdateProfile}
            style={{ cursor: 'pointer', marginTop: '8px' }}
            disabled={isSaving}
          >
            {isSaving ? 'Saving...' : 'Update Profile'}
          </button>
        </div>
      ))}
    </div>
  );
}

export default ProfilePage;
